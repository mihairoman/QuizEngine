/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[Levels_ReadByDifficulty]...';


GO
ALTER PROCEDURE [dbo].[Levels_ReadByDifficulty]
	@Taglist nvarchar(50),
	@Difficulty smallint,
	@Number smallint,
	@Difminus smallint,
	@Difplus smallint,
	@Num smallint,
	@Category nvarchar(50),
	@Questionlist nvarchar(50)
	
AS
BEGIN
	SET NOCOUNT ON;

	declare @Tags table
	(
		Data nvarchar(250)
	)

	declare @Questions table 
	(
		Data nvarchar(250)
	)

	INSERT INTO @Tags
		SELECT *
		FROM dbo.SplitStringList(@Taglist)

	INSERT INTO @Questions
		SELECT *
		FROM dbo.SplitStringList(@Questionlist)

	IF NOT EXISTS(
		SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID, t.TagName
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difminus 
		AND c.CategoryName=@Category)
		OR
	   NOT EXISTS(
		SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID, t.TagName
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difplus
		AND c.CategoryName=@Category)
	BEGIN
		SET @Num = @Num*2
	END

	SELECT TOP(@Number) x.* 
	FROM
	(
		SELECT DISTINCT q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID, [dbo].[QuestionMultipleTags](q.QuestionGUID) as Tags
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difficulty
		AND c.CategoryName=@Category
	) x
	UNION
	SELECT TOP(@Num) y.*
	FROM
	(
		SELECT  DISTINCT q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID, [dbo].[QuestionMultipleTags](q.QuestionGUID) as Tags
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difminus
		AND c.CategoryName=@Category
	) y
	UNION
	SELECT TOP(@Num) z.* 
	FROM
	(
		SELECT DISTINCT q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID, [dbo].[QuestionMultipleTags](q.QuestionGUID) as Tags
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difplus
		AND c.CategoryName=@Category
	) z
END
GO
PRINT N'Creating [dbo].[GeneratedTests_ReadAllPredefined]...';


GO
CREATE PROCEDURE [dbo].[GeneratedTests_ReadAllPredefined]
    @SortExpression nvarchar(max),
	@FoundrowPerPage INT = NULL,
	@FoundPageNumber INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);

	SET @ParmDefinition = N'@FoundPageNumber INT,@FoundrowPerPage INT';
	
	Set @SqlText = 'SELECT qt.QuizTemplateGUID,qt.TypeName
	FROM QuizTemplates qt';
	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	IF (@FoundPageNumber IS NOT NULL and @FoundrowPerPage IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundrowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
	END
	END
	EXECUTE sp_executesql @SqlText, @ParmDefinition,
							@FoundrowPerPage = @FoundrowPerPage,
							@FoundPageNumber = @FoundPageNumber;
                    
END
GO
PRINT N'Creating [dbo].[GeneratedTests_ReadAllRandom]...';


GO
CREATE PROCEDURE [dbo].[GeneratedTests_ReadAllRandom]
    @SortExpression nvarchar(max),
	@FoundrowPerPage INT = NULL,
	@FoundPageNumber INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);

	SET @ParmDefinition = N'@FoundPageNumber INT,@FoundrowPerPage INT';
	
	Set @SqlText = 'SELECT q.QuizGUID, q.LevelGUID, q.CategoryGUID, l.LevelName, l.Difficulty, c.CategoryName
	FROM Quizes q
	inner join Levels l on q.LevelGUID=l.LevelGUID 
	inner join Categories c on q.CategoryGUID=c.CategoryGUID
	WHERE q.LevelGUID IS NOT NULL
	and q.CategoryGUID IS NOT NULL';
	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	IF (@FoundPageNumber IS NOT NULL and @FoundrowPerPage IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundrowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
	END
	END
	EXECUTE sp_executesql @SqlText, @ParmDefinition,
							@FoundrowPerPage = @FoundrowPerPage,
							@FoundPageNumber = @FoundPageNumber;
                    
END
GO
PRINT N'Creating [dbo].[Quiz_CountAllPredefined]...';


GO
CREATE PROCEDURE [dbo].[Quiz_CountAllPredefined]
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT COUNT(*) FROM Quizes
	WHERE Quizes.LevelGUID IS NULL 
	and Quizes.CategoryGUID IS NULL
END
GO
PRINT N'Creating [dbo].[Quiz_CountAllRandom]...';


GO
CREATE PROCEDURE [dbo].[Quiz_CountAllRandom]
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT COUNT(*) FROM Quizes
	WHERE Quizes.LevelGUID IS NOT NULL 
	and Quizes.CategoryGUID IS NOT NULL
END
GO
PRINT N'Creating [dbo].[QuizTemplate_Count]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplate_Count]
AS
BEGIN
	
	SET NOCOUNT ON;
    SELECT COUNT(*) 
	FROM dbo.QuizTemplates 
END
GO
PRINT N'Creating [dbo].[QuizTemplateView_Read]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplateView_Read]
    @PageNumber as int = NULL,
	@RowPerPage as int = NULL,
	@SortExpression as NVARCHAR(MAX) = 'dbo.QuizTemplates.QuizTemplateGUID ASC '
AS
BEGIN
	
	SET NOCOUNT ON;
	DECLARE @SqlText as NVARCHAR(MAX);
	DECLARE @Parameters  as NVARCHAR(MAX);
	SET @Parameters  = N'@FoundPageNumber int, @FoundRowPerPage int';
	SET @SqlText = 'SELECT DISTINCT dbo.QuizTemplates.QuizTemplateGUID, dbo.QuizTemplates.TypeName, count(dbo.Questions.QuestionGUID) AS QuestionNumber
	FROM dbo.QuizTemplates JOIN dbo.TemplateQuestionLinks ON dbo.QuizTemplates.QuizTemplateGUID= dbo.TemplateQuestionLinks.QuizTemplateGUID
	JOIN dbo.Questions ON dbo.Questions.QuestionGUID = dbo.TemplateQuestionLinks.QuestionGUID
	GROUP BY dbo.QuizTemplates.QuizTemplateGUID , dbo.QuizTemplates.TypeName ';
	IF (@SortExpression IS NOT NULL)
		BEGIN
			SET @SqlText = @SqlText + ' ORDER BY ' + @SortExpression;
		END
	IF (@PageNumber IS NOT NULL AND @RowPerPage IS NOT NULL)
		BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundRowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
		END
     EXECUTE sp_executesql @SqlText, @Parameters,
			@FoundPageNumber = @PageNumber,
			@FoundRowPerPage = @RowPerPage

  
END
GO
PRINT N'Creating [dbo].[Users_CountAllUsers]...';


GO
CREATE PROCEDURE [dbo].[Users_CountAllUsers]
AS
BEGIN
	SELECT COUNT(*)
	FROM [Users]
END
GO
PRINT N'Creating [dbo].[Users_ReadAllFilltered]...';


GO
CREATE PROCEDURE [dbo].[Users_ReadAllFilltered]
	@SortExpression AS NVARCHAR(MAX) = null,
	@FoundPageNumber INT = NULL ,
	@FoundRowspPage INT = NULL
AS
BEGIN

SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);

	DECLARE @ParmDefinition NVARCHAR(MAX);

	SET @ParmDefinition = N'@FoundPageNumberParam INT,@FoundRowspPageParam INT';

	Set @SqlText = '
		Select DISTINCT u.UserGUID, u.UserName, u.UserType, u.IsActive
	    FROM [dbo].Users u';
	

	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	END

	SET @SqlText = @SqlText + ' OFFSET ((@FoundPageNumberParam - 1) * @FoundRowspPageParam) ROWS
								FETCH NEXT @FoundRowspPageParam ROWS ONLY';

	EXECUTE sp_executesql 
					  @SqlText,
					  @ParmDefinition,
					  @FoundPageNumber,
					  @FoundRowspPage;
                    
END
GO
PRINT N'Creating [dbo].[Users_WithoutQuizID_CountAll]...';


GO
CREATE PROCEDURE [dbo].[Users_WithoutQuizID_CountAll]
    @QuizGUID UNIQUEIDENTIFIER
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT COUNT(*) FROM Users u
	WHERE u.UserGUID not in (select UserGUID from QuizUserLinks where QuizGUID=@QuizGUID)
END
GO
PRINT N'Creating [dbo].[Users_WithoutTheQuizID]...';


GO
CREATE PROCEDURE [dbo].[Users_WithoutTheQuizID]

	@SortExpression nvarchar(max),
	@GivenFoundrowPerPage INT = NULL,
	@GivenFoundPageNumber INT = NULL,
	@GivenQuizGUID UNIQUEIDENTIFIER
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);

	
	
	Set @SqlText = 'SELECT distinct u.UserGUID, u.Username, u.Usertype, u.IsActive 
	                FROM Users u
                    where u.UserGUID not in ( select q.UserGUID from QuizUserLinks q 
											  where q.QuizGUID=@QuizGUID )' ;
	

	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	IF (@GivenFoundPageNumber IS NOT NULL and @GivenFoundrowPerPage IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundrowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
	END
	END
	SET @ParmDefinition = N'@FoundPageNumber INT,@FoundrowPerPage INT, @QuizGUID UNIQUEIDENTIFIER';

	EXECUTE sp_executesql @SqlText, @ParmDefinition,
							@FoundrowPerPage = @GivenFoundrowPerPage,
							@FoundPageNumber = @GivenFoundPageNumber,
							@QuizGUID = @GivenQuizGUID ;
                    
END
GO
PRINT N'Update complete.';


GO
