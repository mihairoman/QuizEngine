/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[ArchivedChoices]...';


GO
ALTER TABLE [dbo].[ArchivedChoices]
    ADD [ChoicePosition] INT NULL;


GO
PRINT N'Altering [dbo].[ArchivedChoices_Insert]...';


GO
ALTER PROCEDURE [dbo].[ArchivedChoices_Insert]
	-- Add the parameters for the stored procedure here
	@ChoiceGUID uniqueidentifier,
	@ArchivedQuestionGUID uniqueidentifier,
	@AnswerText nvarchar(max),
	@Value decimal(5,2) = null,
	@IsCorrect bit = null,
	@ChoicePosition int = null
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO ArchivedChoices
	VALUES (@ChoiceGUID,@ArchivedQuestionGUID,@AnswerText,@Value,@IsCorrect,@ChoicePosition)
END
GO
PRINT N'Altering [dbo].[ArchivedChoices_ReadAll]...';


GO
ALTER PROCEDURE [dbo].[ArchivedChoices_ReadAll]
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT ChoiceGUID, ArchivedQuestionGUID, AnswerText, Value, IsCorrect
	FROM ArchivedChoices
	ORDER BY ChoicePosition

END
GO
PRINT N'Altering [dbo].[ArchivedChoices_ReadByID]...';


GO
ALTER PROCEDURE [dbo].[ArchivedChoices_ReadByID]
	@ChoiceGUID uniqueidentifier,
	@ArchivedQuestionGUID uniqueidentifier
AS
BEGIN
	
	SET NOCOUNT ON;

    SELECT ChoiceGUID, ArchivedQuestionGUID, AnswerText, Value, IsCorrect
	FROM ArchivedChoices
	WHERE ChoiceGUID = @ChoiceGUID
		  AND ArchivedQuestionGUID = @ArchivedQuestionGUID
	ORDER BY ChoicePosition
END
GO
PRINT N'Altering [dbo].[ArchivedChoices_ReadByQuestionIDS]...';


GO
ALTER PROCEDURE [dbo].[ArchivedChoices_ReadByQuestionIDS]
	@QuestionGUIDS NVARCHAR(MAX)

AS
BEGIN
	
	SET NOCOUNT ON;

	declare @QuestionIDs table
	(
		QuestionGUID uniqueidentifier
	)

	INSERT INTO @QuestionIDs
		SELECT * FROM dbo.SplitGuidStringList(@QuestionGUIDS)

	SELECT ac.ChoiceGUID, ac.ArchivedQuestionGUID, ac.AnswerText, ac.Value, ac.IsCorrect
	FROM ArchivedChoices ac
		INNER JOIN @QuestionIDs qg ON qg.QuestionGUID = ac.ArchivedQuestionGUID
	ORDER BY ChoicePosition

END
GO
PRINT N'Altering [dbo].[ArchivedQuestions_Insert]...';


GO
ALTER PROCEDURE [dbo].[ArchivedQuestions_Insert]
	@ArchivedQuestionGUID uniqueidentifier,
	@ArchivedQuestionText nvarchar(max),
	@QuestionType smallint,
	@LevelGUID uniqueidentifier,
	@CategoryGUID uniqueidentifier,
	@QuizGUID uniqueidentifier,
	@IndexOrder smallint
AS
BEGIN
	
	SET NOCOUNT ON;
	INSERT INTO ArchivedQuestions VALUES (@ArchivedQuestionGUID,@ArchivedQuestionText,@QuestionType,@LevelGUID,@CategoryGUID,@QuizGUID, @IndexOrder )
END
GO
PRINT N'Altering [dbo].[Users_WithoutTheQuizID]...';


GO
ALTER PROCEDURE [dbo].[Users_WithoutTheQuizID]

	@SortExpression nvarchar(max),
	@GivenFoundrowPerPage INT = NULL,
	@GivenFoundPageNumber INT = NULL,
	@GivenQuizGUID UNIQUEIDENTIFIER
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);

	
	
	Set @SqlText = 'SELECT distinct u.UserGUID, u.Username, u.Usertype, u.IsActive 
	                FROM Users u
                    where u.IsActive=1 
					and  u.UserGUID not in ( select q.UserGUID from QuizUserLinks q 
											  where q.QuizGUID=@QuizGUID )' ;
	

	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	IF (@GivenFoundPageNumber IS NOT NULL and @GivenFoundrowPerPage IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundrowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
	END
	END
	SET @ParmDefinition = N'@FoundPageNumber INT,@FoundrowPerPage INT, @QuizGUID UNIQUEIDENTIFIER';

	EXECUTE sp_executesql @SqlText, @ParmDefinition,
							@FoundrowPerPage = @GivenFoundrowPerPage,
							@FoundPageNumber = @GivenFoundPageNumber,
							@QuizGUID = @GivenQuizGUID ;
                    
END
GO
PRINT N'Creating [dbo].[QuizUserLink_InsertForGeneratingNewLink]...';


GO
CREATE PROCEDURE [dbo].[QuizUserLink_InsertForGeneratingNewLink]
	@QuizGUID uniqueidentifier,
	@UserGuid uniqueidentifier,
	@Result decimal(5,2) = null,
	@QuizDate   Datetime,
	@OnlineOrDownloaded bit,
	@IsTaken bit = null
AS
BEGIN
    INSERT INTO dbo.QuizUserLinks VALUES (@QuizGUID, @UserGuid , @Result, @QuizDate, @OnlineOrDownloaded, @IsTaken)
	
END
GO
PRINT N'Refreshing [dbo].[ArchivedChoices_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ArchivedChoices_Delete]';


GO
PRINT N'Refreshing [dbo].[ArchivedChoices_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ArchivedChoices_Update]';


GO
PRINT N'Refreshing [dbo].[ArchivedQuestions_InsertById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ArchivedQuestions_InsertById]';


GO
PRINT N'Refreshing [dbo].[QuizResultView_ReadResult]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[QuizResultView_ReadResult]';


GO
PRINT N'Update complete.';


GO
