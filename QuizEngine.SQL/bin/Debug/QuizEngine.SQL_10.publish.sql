/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping FK_Choices_Questions...';


GO
ALTER TABLE [dbo].[Choices] DROP CONSTRAINT [FK_Choices_Questions];


GO
PRINT N'Dropping FK_QuestionTags_Questions...';


GO
ALTER TABLE [dbo].[QuestionTags] DROP CONSTRAINT [FK_QuestionTags_Questions];


GO
PRINT N'Altering [dbo].[Choices]...';


GO
ALTER TABLE [dbo].[Choices] ALTER COLUMN [AnswerText] NVARCHAR (MAX) NULL;

ALTER TABLE [dbo].[Choices] ALTER COLUMN [Value] DECIMAL (5, 2) NULL;


GO
PRINT N'Creating [dbo].[QuizTemplates]...';


GO
CREATE TABLE [dbo].[QuizTemplates] (
    [QuizTemplateGUID] UNIQUEIDENTIFIER NOT NULL,
    [TypeName]         VARCHAR (MAX)    NOT NULL,
    CONSTRAINT [PK_SpecialQuizes] PRIMARY KEY CLUSTERED ([QuizTemplateGUID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[TemplateQuestionLinks]...';


GO
CREATE TABLE [dbo].[TemplateQuestionLinks] (
    [QuizTemplateGUID] UNIQUEIDENTIFIER NOT NULL,
    [QuestionGUID]     UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_SpecialQuizQuizestionLinks] PRIMARY KEY CLUSTERED ([QuizTemplateGUID] ASC, [QuestionGUID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating FK_Choices_Questions...';


GO
ALTER TABLE [dbo].[Choices] WITH NOCHECK
    ADD CONSTRAINT [FK_Choices_Questions] FOREIGN KEY ([QuestionGUID]) REFERENCES [dbo].[Questions] ([QuestionGUID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_QuestionTags_Questions...';


GO
ALTER TABLE [dbo].[QuestionTags] WITH NOCHECK
    ADD CONSTRAINT [FK_QuestionTags_Questions] FOREIGN KEY ([QuestionGUID]) REFERENCES [dbo].[Questions] ([QuestionGUID]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_SpecialQuizQuizestionLinks_SpecialQuizes...';


GO
ALTER TABLE [dbo].[TemplateQuestionLinks] WITH NOCHECK
    ADD CONSTRAINT [FK_SpecialQuizQuizestionLinks_SpecialQuizes] FOREIGN KEY ([QuizTemplateGUID]) REFERENCES [dbo].[QuizTemplates] ([QuizTemplateGUID]);


GO
PRINT N'Creating [dbo].[QuestionMultipleTags]...';


GO
CREATE FUNCTION [dbo].[QuestionMultipleTags] 
(
	@QuestionGUID NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	DECLARE @TagList NVARCHAR(MAX)

	SELECT @TagList = COALESCE(@TagList + ', ' , '') + t.TagName
	FROM Tags t
	INNER JOIN QuestionTags qt on t.TagGUID = qt.TagGUID
	INNER JOIN Questions q on qt.QuestionGUID = q.QuestionGUID
	WHERE q.QuestionGUID = @QuestionGUID

	RETURN @TagList
END
GO
PRINT N'Creating [dbo].[SplitStringList]...';


GO
CREATE FUNCTION [dbo].[SplitStringList]
(
	@StringList nvarchar(MAX)
)
RETURNS 
@ParsedList TABLE
(
	ItemID nvarchar(255)
)
AS
BEGIN
	DECLARE @strLen int
	DECLARE @strPos int
	DECLARE @nextStrDelim int
	DECLARE @val varchar(255)

	SET @strLen = len(@StringList)
	IF (@strLen <= 1 AND @StringList <> ',')
		INSERT @ParsedList VALUES (@StringList)
	ELSE
		SET @strPos = 0

		WHILE @strPos <= @strLen
		BEGIN
			SET @nextStrDelim = charindex(',', @StringList, @strPos)
			IF @nextStrDelim = 0
				SET @nextStrDelim = @strLen + 1

			SET @val = substring(@StringList, @strPos, @nextStrDelim - @strPos)

			INSERT @ParsedList VALUES (@val)

			SET @strPos = @nextStrDelim + 1
END

RETURN
END
GO
PRINT N'Altering [dbo].[Choices_Insert]...';


GO

---------------------------------------  INSERT A CHOISE
ALTER PROCEDURE [dbo].[Choices_Insert]
	@ChoiceGUID UNIQUEIDENTIFIER,
	@QuestionGUID UNIQUEIDENTIFIER,
	@AnswerText NVARCHAR(MAX),
	@Value DECIMAL(5,2) = null,
	@IsCorrect bit = null
AS
BEGIN

	INSERT
	INTO [Choices]
	VALUES(@ChoiceGUID,@QuestionGUID,@AnswerText,@Value,@IsCorrect)

END;
GO
PRINT N'Altering [dbo].[Answers_DeleteAnswerText]...';


GO
ALTER PROCEDURE [dbo].[Answers_DeleteAnswerText]
@QuizGUID uniqueidentifier,
@ArchivedQuestionGUID uniqueidentifier,
@UserGUID uniqueidentifier,
@ArchivedChoiceGUID uniqueidentifier
AS
BEGIN
UPDATE [Answers] SET AnswerText=' '
WHERE  QuizGUID=@QuizGUID and ArchivedQuestionGUID=@ArchivedQuestionGUID and ArchivedChoiceGUID=@ArchivedChoiceGUID and UserGUID=@UserGUID

END
GO
PRINT N'Altering [dbo].[Answers_DeleteGrade]...';


GO
ALTER PROCEDURE [dbo].[Answers_DeleteGrade]
@QuizGUID uniqueidentifier,
@ArchivedQuestionGUID uniqueidentifier,
@UserGUID uniqueidentifier,
@ArchivedChoiceGUID uniqueidentifier
AS
BEGIN
UPDATE [Answers] SET Grade = 0.0 
WHERE  QuizGUID=@QuizGUID and ArchivedQuestionGUID=@ArchivedQuestionGUID and ArchivedChoiceGUID=@ArchivedChoiceGUID and UserGUID=@UserGUID
END
GO
PRINT N'Altering [dbo].[Answers_ReadByID]...';


GO

ALTER PROCEDURE [dbo].[Answers_ReadByID]
@QuizGUID uniqueidentifier,
@ArchivedQuestionGUID uniqueidentifier,
@UserGUID uniqueidentifier,
@ArchivedChoiceGUID uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	
	select QuizGUID,ArchivedQuestionGUID,Grade,AnswerText,UserGUID,ArchivedChoiceGUID 
	from [Answers] 
	where QuizGUID=@QuizGUID and ArchivedQuestionGUID=@ArchivedQuestionGUID and ArchivedChoiceGUID =@ArchivedChoiceGUID and UserGUID=@UserGUID
	    
END
GO
PRINT N'Creating [dbo].[ArchivedQuestions_InsertById]...';


GO
CREATE PROCEDURE [dbo].[ArchivedQuestions_InsertById]
	@QuestionGUID uniqueidentifier,
	@QuizGUID uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE 

	@ChoiceGUID uniqueidentifier,
	@ArchivedQuestionGUID uniqueidentifier =NEWID(),
	@ArchivedQuestionText nvarchar(max),
	@QuestionType smallint,
	@LevelGUID uniqueidentifier, 
	@CategoryGUID uniqueidentifier
	SELECT @ArchivedQuestionText=Text, @QuestionType=QuestionType, @LevelGUID=LevelGUID, @CategoryGUID=CategoryGUID 
	FROM Questions
	WHERE @QuestionGUID=QuestionGUID
	
	INSERT INTO ArchivedQuestions VALUES(@ArchivedQuestionGUID, @ArchivedQuestionText, @QuestionType, @LevelGUID,@CategoryGUID, @QuizGUID)


	INSERT INTO ArchivedChoices
	SELECT NEWID(),
    @ArchivedQuestionGUID,
	C.AnswerText,
	C.Value,
	C.IsCorrect
    FROM Questions as Q 
	INNER JOIN Choices as C ON C.QuestionGUID = @QuestionGUID
	WHERE C.QuestionGUID=Q.QuestionGUID

END
GO
PRINT N'Creating [dbo].[Categories_CanBeDeleted]...';


GO
CREATE PROCEDURE [dbo].[Categories_CanBeDeleted]
	@CategoryGUID uniqueidentifier, @ReturnValue bit output
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (SELECT q.QuestionGUID FROM Questions q WHERE q.CategoryGUID = @CategoryGUID) OR 
		EXISTS (SELECT aq.ArchivedQuestionGUID FROM ArchivedQuestions aq WHERE aq.CategoryGUID = @CategoryGUID) OR
		EXISTS (SELECT qu.QuizGUID FROM Quizes qu WHERE qu.CategoryGUID = @CategoryGUID)
	BEGIN
		SET @ReturnValue = 0
	END
	ELSE
	BEGIN
		SET @ReturnValue = 1
	END
END
GO
PRINT N'Creating [dbo].[Categories_CountUsingQuestions]...';


GO
CREATE PROCEDURE [dbo].[Categories_CountUsingQuestions]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT c.CategoryGUID, c.CategoryName, COUNT(q.ArchivedQuestionGUID) AS NumberOfQuestions
	FROM Categories c
	LEFT JOIN ArchivedQuestions q ON c.CategoryGUID = q.CategoryGUID
	GROUP BY c.CategoryGUID, c.CategoryName
	    
END
GO
PRINT N'Creating [dbo].[Choices_DeleteByQuestionID]...';


GO
CREATE PROCEDURE [dbo].[Choices_DeleteByQuestionID]
	@QuestionGUID uniqueidentifier
AS
BEGIN
	DELETE
	FROM [dbo].[Choices]
	WHERE QuestionGUID = @QuestionGUID
END
GO
PRINT N'Creating [dbo].[Choices_ReadByQuestionID]...';


GO
CREATE PROCEDURE [dbo].[Choices_ReadByQuestionID]
	@QuestionGUID UNIQUEIDENTIFIER
AS
BEGIN
		SELECT TOP 1000 
			  c.ChoiceGUID
			, c.QuestionGUID
			, c.AnswerText
			, c.Value
			, c.IsCorrect
	  FROM [dbo].[Questions] as q
	   JOIN [dbo].[Choices] as c 
	  ON q.[QuestionGUID] = c.[QuestionGUID] 
	  WHERE q.QuestionGUID= @QuestionGUID
END
GO
PRINT N'Creating [dbo].[FreeTextQuizView_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[FreeTextQuizView_ReadAll]
AS
BEGIN

	SET NOCOUNT ON;
    SELECT Users.UserGUID, Quizes.QuizGUID, Username, QuizDate, CategoryName, LevelName
	FROM Users, QuizUserLinks, Levels, Categories, Quizes
	WHERE QuizUserLinks.UserGUID = Users.UserGUID
	AND Quizes.QuizGUID=QuizUserLinks.QuizGUID
	AND Quizes.LevelGUID=Levels.LevelGUID
	AND Quizes.CategoryGUID=Categories.CategoryGUID
	AND Result IS NULL
	AND OnlineOrDownloaded = 1
END
GO
PRINT N'Creating [dbo].[Levels_ReadByDifficulty]...';


GO
CREATE PROCEDURE [dbo].[Levels_ReadByDifficulty]
	@Taglist nvarchar(50),
	@Difficulty smallint,
	@Number smallint,
	@Difminus smallint,
	@Difplus smallint,
	@Num smallint,
	@Category nvarchar(50),
	@Questionlist nvarchar(50)
	
AS
BEGIN
	SET NOCOUNT ON;

	declare @Tags table
	(
		Data nvarchar(250)
	)

	declare @Questions table 
	(
		Data nvarchar(250)
	)

	INSERT INTO @Tags
		SELECT *
		FROM dbo.SplitStringList(@Taglist)

	INSERT INTO @Questions
		SELECT *
		FROM dbo.SplitStringList(@Questionlist)

	IF NOT EXISTS(
		SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difminus 
		AND c.CategoryName=@Category)
		OR
	   NOT EXISTS(
		SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID
		FROM Questions q 
			INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
			INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
			INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
			INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
			INNER JOIN @Tags tl ON tl.Data = t.TagName
			INNER JOIN @Questions qq ON qq.Data = q.QuestionType
		WHERE l.Difficulty=@Difplus
		AND c.CategoryName=@Category)
	BEGIN
		SET @Num = @Num*2
	END

	SELECT TOP(@Number) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID
	FROM Questions q 
		INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
		INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
		INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
		INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
		INNER JOIN @Tags tl ON tl.Data = t.TagName
		INNER JOIN @Questions qq ON qq.Data = q.QuestionType
	WHERE l.Difficulty=@Difficulty
	AND c.CategoryName=@Category
	UNION
	SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID
	FROM Questions q 
		INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
		INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
		INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
		INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
		INNER JOIN @Tags tl ON tl.Data = t.TagName
		INNER JOIN @Questions qq ON qq.Data = q.QuestionType
	WHERE l.Difficulty=@Difminus
	AND c.CategoryName=@Category
	UNION
	SELECT TOP(@Num) q.QuestionGUID, q.Text, q.QuestionType,q.CategoryGUID,q.LevelGUID
	FROM Questions q 
		INNER JOIN Levels l ON l.LevelGUID = q.LevelGUID
		INNER JOIN Categories c ON c.CategoryGUID = q.CategoryGUID
		INNER JOIN QuestionTags qt ON qt.QuestionGUID = q.QuestionGUID
		INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
		INNER JOIN @Tags tl ON tl.Data = t.TagName
		INNER JOIN @Questions qq ON qq.Data = q.QuestionType
	WHERE l.Difficulty=@Difplus
	AND c.CategoryName=@Category
END
GO
PRINT N'Creating [dbo].[Question_ReadAllFiltered]...';


GO
CREATE PROCEDURE [dbo].[Question_ReadAllFiltered]
	@Category AS uniqueidentifier = null ,
	@Level AS uniqueidentifier = null,
	@Tag AS NVARCHAR(MAX)  = null,
	@Type AS NVARCHAR(MAX) = null,
	@SortExpression AS NVARCHAR(MAX) = null
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);
	
	Set @SqlText = 'SELECT DISTINCT q.QuestionGUID, q.Text, q.QuestionType as Type, c.CategoryName as Category ,l.LevelName as Level, [dbo].[QuestionMultipleTags](q.QuestionGUID) as Tag
	FROM Questions q	
	INNER JOIN QuestionTags qt ON q.QuestionGUID = qt.QuestionGUID
	INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
	INNER JOIN Categories c ON q.CategoryGUID = c.CategoryGUID
	INNER JOIN Levels l ON q.LevelGUID = l.LevelGUID';
	

	IF (@Tag IS NOT NULL)
	BEGIN
		SET @SqlText = @SqlText + ' INNER JOIN (SELECT ItemID FROM [dbo].[SplitGuidStringList](@FoundTag)) ft ON ft.ItemID = qt.TagGUID';
	END

	IF (@Type IS NOT NULL)
	BEGIN
		SET @SqlText = @SqlText + ' INNER JOIN (SELECT ItemID FROM [dbo].[SplitStringList] (@FoundType)) qtft on q.QuestionType=qtft.ItemID';
	END

	IF ((@Category IS NOT NULL) OR (@Level IS NOT NULL))
	BEGIN
		SET @SqlText = @SqlText + ' WHERE';

			IF (@Category IS NOT  NULL) 
			BEGIN
				SET @SqlText = @SqlText + ' c.CategoryGUID = @FoundCategory';
			END
			IF ((@Category IS NOT NULL) AND (@Level IS NOT NULL))
			BEGIN 
			SET @SqlText = @SqlText + ' AND';
			END
			IF (@Level IS NOT NULL) 
			BEGIN
				SET @SqlText = @SqlText + ' l.LevelGUID=@FoundLevel';
			END
		END

	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	END

	SET @ParmDefinition = N'@FoundTag NVARCHAR(MAX), @FoundType NVARCHAR(MAX),@FoundCategory uniqueidentifier,@FoundLevel uniqueidentifier';
	EXECUTE sp_executesql @SqlText, @ParmDefinition,
                      @FoundTag = @Tag,
					  @FoundType = @Type,
					  @FoundCategory = @Category,
					  @FoundLevel = @Level;
END
GO
PRINT N'Creating [dbo].[Questions_ReadByQuizTemplateID]...';


GO
CREATE PROCEDURE [dbo].[Questions_ReadByQuizTemplateID]
	@QuizTemplateGUID UNIQUEIDENTIFIER
AS
BEGIN

	SET NOCOUNT ON;

    SELECT dbo.Questions.QuestionGUID, Text, QuestionType, CategoryGUID, LevelGUID 
	FROM [Questions] JOIN [TemplateQuestionLinks] ON dbo.Questions.QuestionGUID = dbo.TemplateQuestionLinks.QuestionGUID
	WHERE dbo.TemplateQuestionLinks.QuizTemplateGUID = @QuizTemplateGUID
END
GO
PRINT N'Creating [dbo].[QuestionTags_DeleteByQuestionID]...';


GO
CREATE PROCEDURE [dbo].[QuestionTags_DeleteByQuestionID]
	@QuestionGUID uniqueidentifier
	
AS
BEGIN
	DELETE FROM [dbo].[QuestionTags]
	WHERE QuestionGUID = @QuestionGUID
END
GO
PRINT N'Creating [dbo].[QuestionTags_InsertByQuestionGUIDAndListOfTagGUID]...';


GO
CREATE PROCEDURE [dbo].[QuestionTags_InsertByQuestionGUIDAndListOfTagGUID]
	@QuestionGUID UNIQUEIDENTIFIER,
    @TagsGUIDList NVARCHAR(MAX)
AS
BEGIN

	

	IF (LEN(@TagsGUIDList) > 0)
	BEGIN
		INSERT INTO [dbo].[QuestionTags] 
			([QuestionGUID],[TagGUID])
		SELECT @QuestionGUID, ItemID 
		FROM dbo.SplitGuidStringList(@TagsGUIDList);
	END;
END;
GO
PRINT N'Creating [dbo].[QuizesPerUserView_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[QuizesPerUserView_ReadAll]
	@UserGUID uniqueidentifier
AS
BEGIN
	SET NOCOUNT ON;

	SELECT q1.QuizGUID, q1.QuizDate, c.CategoryName, l.LevelName, q1.OnlineOrDownloaded, q1.Result, q1.IsTaken
	FROM QuizUserLinks q1
		INNER JOIN Quizes q2 ON q1.QuizGUID = q2.QuizGUID
		INNER JOIN Levels l ON q2.LevelGUID = l.LevelGUID
		INNER JOIN Categories c ON q2.CategoryGUID = c.CategoryGUID
	WHERE q1.UserGUID = @UserGUID
	ORDER BY Q1.QuizDate
END
GO
PRINT N'Creating [dbo].[QuizResultView_ReadResult]...';


GO
CREATE PROCEDURE [dbo].[QuizResultView_ReadResult]
@QuizGUID uniqueidentifier,
@UserGUID uniqueidentifier
AS
BEGIN
 
  DECLARE @UserAnswers TABLE (
	QuizGuid uniqueidentifier,
	ArchivedQuestionGuid uniqueidentifier,
	Answered bit,
	ArchivedChoiceGuid uniqueidentifier,
	IsCorrect bit,
	Value decimal(5,2),
	Grade decimal(5,2)
)

INSERT INTO @UserAnswers
 SELECT  AQ.QuizGUID,
		 AQ.ArchivedQuestionGUID,
		 (CASE WHEN (A.ArchivedQuestionGUID is null) THEN 0 ELSE 1 END ) as  Answered,
		 AC.ChoiceGUID,
		 AC.IsCorrect,
		 AC.Value,
		 A.Grade
 FROM  ArchivedQuestions as AQ 
 INNER JOIN ArchivedChoices as AC ON AQ.ArchivedQuestionGUID = AC.ArchivedQuestionGUID
 LEFT JOIN Answers as A ON A.ArchivedQuestionGUID = AC.ArchivedQuestionGUID AND AC.ChoiceGUID = a.ArchivedChoiceGUID
 WHERE @QuizGUID = AQ.QuizGUID 
		AND
	   @UserGUID = a.UserGUID
 ORDER BY AQ.ArchivedQuestionGUID, ChoiceGUID

 SELECT      AQ.QuizGUID,
			 AQ.ArchivedQuestionGUID as QuestionID,
			 "Result" = 
			 CASE AQ.QuestionType 
				 WHEN 2 then				  			 
					 CASE (SELECT Answered FROM @UserAnswers as UA where ua.ArchivedQuestionGuid = AQ.ArchivedQuestionGUID and ua.IsCorrect=1)
																																		 WHEN 1 THEN 1
																																		 ELSE 0
					 END 
				WHEN 1 THEN							
					CASE
					WHEN EXISTS(
								SELECT count(UA.Answered) 
								as PartialResult
								FROM @UserAnswers as UA 
								WHERE ua.ArchivedQuestionGuid = AQ.ArchivedQuestionGUID
								and ua.IsCorrect=1
								HAVING count(UA.Answered)  = (SELECT count(AC1.ChoiceGUID) FROM ArchivedChoices as AC1
								WHERE ac1.ArchivedQuestionGUID=AQ.ArchivedQuestionGUID and AC1.IsCorrect=1)) 
																																THEN 1
																																ELSE 0
					END	
				WHEN 4 THEN 
					(SELECT UA.Value FROM @UserAnswers as UA WHERE ua.ArchivedQuestionGuid = AQ.ArchivedQuestionGUID and ua.Answered=1)				
				WHEN 0 THEN 
					(SELECT UA.Grade from @UserAnswers as UA WHERE ua.ArchivedQuestionGuid = AQ.ArchivedQuestionGUID and ua.Answered=1)
				WHEN 3 then 
					(SELECT UA.IsCorrect from @UserAnswers as UA WHERE ua.ArchivedQuestionGuid = AQ.ArchivedQuestionGUID and ua.Answered=1)					
			END		 
	 FROM ArchivedQuestions as AQ
	 WHERE AQ.QuizGUID = @QuizGUID
	 	
END
GO
PRINT N'Creating [dbo].[QuizTemplates_Insert]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplates_Insert]
	@QuizTemplateGUID uniqueidentifier,
	@TypeName nvarchar(max)
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO dbo.QuizTemplates VALUES (@QuizTemplateGUID , @TypeName)
   
END
GO
PRINT N'Creating [dbo].[QuizTemplates_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplates_ReadAll]
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT dbo.QuizTemplates.QuizTemplateGUID , dbo.QuizTemplates.TypeName 
	FROM   dbo.QuizTemplates
   
END
GO
PRINT N'Creating [dbo].[QuizTemplates_ReadById]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplates_ReadById]
@QuizTemplateGUID uniqueidentifier
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT dbo.QuizTemplates.QuizTemplateGUID , dbo.QuizTemplates.TypeName 
	FROM dbo.QuizTemplates
	WHERE QuizTemplateGUID = @QuizTemplateGUID
   
END
GO
PRINT N'Creating [dbo].[QuizTemplateView_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[QuizTemplateView_ReadAll]
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT DISTINCT dbo.QuizTemplates.QuizTemplateGUID, dbo.QuizTemplates.TypeName, count(dbo.Questions.QuestionGUID)
	FROM dbo.QuizTemplates JOIN dbo.TemplateQuestionLinks ON dbo.QuizTemplates.QuizTemplateGUID= dbo.TemplateQuestionLinks.QuizTemplateGUID
	JOIN dbo.Questions ON dbo.Questions.QuestionGUID = dbo.TemplateQuestionLinks.QuestionGUID
	GROUP BY dbo.QuizTemplates.QuizTemplateGUID , dbo.QuizTemplates.TypeName
  
END
GO
PRINT N'Creating [dbo].[QuizUserPreview_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[QuizUserPreview_ReadAll]
AS
BEGIN
	SET NOCOUNT ON;
	SELECT dbo.Quizes.QuizGUID, dbo.Levels.LevelName, dbo.Categories.CategoryName, count(dbo.ArchivedQuestions.ArchivedQuestionGUID) AS QuestionNumber
	FROM dbo.Levels JOIN dbo.Quizes ON dbo.Levels.LevelGUID = dbo.Quizes.LevelGUID JOIN dbo.Categories ON dbo.Quizes.CategoryGUID = dbo.Categories.CategoryGUID
		JOIN dbo.ArchivedQuestions ON dbo.ArchivedQuestions.QuizGUID = dbo.Quizes.QuizGUID
	GROUP BY dbo.Quizes.QuizGUID, dbo.Levels.LevelName, dbo.Categories.CategoryName

END
GO
PRINT N'Creating [dbo].[Tags_ReadAllByQuestionID]...';


GO
CREATE PROCEDURE [dbo].[Tags_ReadAllByQuestionID]
	@QuestionGUID uniqueidentifier
AS
BEGIN
	SELECT t.TagGUID, t.TagName FROM [dbo].[Tags] t
	INNER JOIN [dbo].[QuestionTags] qt ON qt.TagGUID = t.TagGUID
	WHERE qt.QuestionGUID = @QuestionGUID
END
GO
PRINT N'Creating [dbo].[TemplateQuestionLinks_Insert]...';


GO

CREATE PROCEDURE [dbo].[TemplateQuestionLinks_Insert]
	@TemplateQuizGUID uniqueidentifier,
	@QuestionGUID uniqueidentifier
	
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO dbo.TemplateQuestionLinks VALUES (@TemplateQuizGUID, @QuestionGUID)
END
GO
PRINT N'Creating [dbo].[TemplateQuestionLinks_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[TemplateQuestionLinks_ReadAll]
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT dbo.TemplateQuestionLinks.QuizTemplateGUID , dbo.TemplateQuestionLinks.QuestionGUID
	FROM dbo.TemplateQuestionLinks
 
END
GO
PRINT N'Creating [dbo].[TemplateQuestionLinks_ReadByQuizId]...';


GO
CREATE PROCEDURE [dbo].[TemplateQuestionLinks_ReadByQuizId]
	@TemplateQuizGUID UNIQUEIDENTIFIER
AS
BEGIN
	
	SET NOCOUNT ON;
	SELECT dbo.TemplateQuestionLinks.QuizTemplateGUID , dbo.TemplateQuestionLinks.QuestionGUID
	FROM dbo.TemplateQuestionLinks
	WHERE dbo.TemplateQuestionLinks.QuizTemplateGUID =@TemplateQuizGUID
END
GO
PRINT N'Creating [dbo].[Users_ReadByEmail]...';


GO
CREATE PROCEDURE [dbo].[Users_ReadByEmail]
@Username NVARCHAR(50)

AS
BEGIN

	SELECT UserGUID, Username, Usertype, IsActive 
	FROM [Users]
	WHERE Username = @Username

END;
GO
PRINT N'Creating [dbo].[Users_ReadPermissions]...';


GO
CREATE PROCEDURE [dbo].[Users_ReadPermissions]
@UserGUID UNIQUEIDENTIFIER

AS
BEGIN

	SELECT UserGUID, PermissionGUID
	FROM [Permissions]
	WHERE UserGUID = @UserGUID

END;
GO
PRINT N'Creating [dbo].[Users_UpdatePermissions]...';


GO
CREATE PROCEDURE [dbo].[Users_UpdatePermissions]
	@UserGUID UNIQUEIDENTIFIER,
    @PermissionsListGUID NVARCHAR(MAX)
AS
BEGIN

	DELETE 
	FROM [Permissions]
	WHERE UserGUID = @UserGUID

	IF (LEN(@PermissionsListGUID) > 0)
	BEGIN
		INSERT INTO [Permissions] 
			([UserGUID],[PermissionGUID])
		SELECT @UserGUID, Value 
		FROM dbo.SplitString(@PermissionsListGUID,',');
	END;
END;
GO
PRINT N'Refreshing [dbo].[Choices_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Choices_Delete]';


GO
PRINT N'Refreshing [dbo].[Choices_ReadAll]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Choices_ReadAll]';


GO
PRINT N'Refreshing [dbo].[Choices_ReadByID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Choices_ReadByID]';


GO
PRINT N'Refreshing [dbo].[Choices_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[Choices_Update]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Choices] WITH CHECK CHECK CONSTRAINT [FK_Choices_Questions];

ALTER TABLE [dbo].[QuestionTags] WITH CHECK CHECK CONSTRAINT [FK_QuestionTags_Questions];

ALTER TABLE [dbo].[TemplateQuestionLinks] WITH CHECK CHECK CONSTRAINT [FK_SpecialQuizQuizestionLinks_SpecialQuizes];


GO
PRINT N'Update complete.';


GO
