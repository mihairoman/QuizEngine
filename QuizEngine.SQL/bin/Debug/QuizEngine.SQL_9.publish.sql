/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 6b4b8f5c-2794-4a52-908e-6e59f5332025, 95afd283-6edf-49b5-b87a-e4b87eba9ee6 is skipped, element [dbo].[Permissions].[Id] (SqlSimpleColumn) will not be renamed to [UserGUID]';


GO
PRINT N'Rename refactoring operation with key 63dc374c-b9e7-447a-b288-1d216294d2c9 is skipped, element [dbo].[Permissions].[[UserGUID]]] (SqlSimpleColumn) will not be renamed to UserGUID';


GO
PRINT N'Creating [dbo].[Permissions]...';


GO
CREATE TABLE [dbo].[Permissions] (
    [UserGUID]       UNIQUEIDENTIFIER NOT NULL,
    [PermissionGUID] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Permissions] PRIMARY KEY CLUSTERED ([UserGUID] ASC, [PermissionGUID] ASC)
);


GO
PRINT N'Creating FK_Permissions_ToTable...';


GO
ALTER TABLE [dbo].[Permissions] WITH NOCHECK
    ADD CONSTRAINT [FK_Permissions_ToTable] FOREIGN KEY ([UserGUID]) REFERENCES [dbo].[Users] ([UserGUID]);


GO
PRINT N'Altering [dbo].[ArchivedQuestions_Insert]...';


GO
ALTER PROCEDURE [dbo].[ArchivedQuestions_Insert]
	@ArchivedQuestionGUID uniqueidentifier,
	@ArchivedQuestionText nvarchar(max),
	@QuestionType smallint,
	@LevelGUID uniqueidentifier,
	@CategoryGUID uniqueidentifier,
	@QuizGUID uniqueidentifier
	
AS
BEGIN
	
	SET NOCOUNT ON;
	INSERT INTO ArchivedQuestions VALUES (@ArchivedQuestionGUID,@ArchivedQuestionText,@QuestionType,@LevelGUID,@CategoryGUID,@QuizGUID )
END
GO
PRINT N'Altering [dbo].[Questions_Insert]...';


GO

---------------------------------------  INSERT A QUESTION 

ALTER PROCEDURE [dbo].[Questions_Insert]
	@QuestionGUID UNIQUEIDENTIFIER,
	@Text NVARCHAR(MAX),
	@QuestionType smallint,
	@CategoryGUID UNIQUEIDENTIFIER,
	@LevelGUID UNIQUEIDENTIFIER

AS
BEGIN

	INSERT INTO [Questions]
	Values (@QuestionGUID, @Text, @QuestionType, @CategoryGUID,@LevelGUID)

END;
GO
PRINT N'Altering [dbo].[Users_Insert]...';


GO

---------------------------------------  INSERT A USER

ALTER PROCEDURE [dbo].[Users_Insert]
	@UserGUID UNIQUEIDENTIFIER,
	@UserName NVARCHAR(MAX),
	@UserType SMALLINT
AS
BEGIN

	INSERT INTO [Users] (UserGUID, Username, Usertype)
	Values (@UserGUID, @UserName, @UserType)

END;
GO
PRINT N'Altering [dbo].[Users_Update]...';


GO

---------------------------------------  UPDATE A USER

ALTER PROCEDURE [dbo].[Users_Update]
	@UserGUID UNIQUEIDENTIFIER,
	@UserName NVARCHAR(MAX),
	@UserType SMALLINT

AS
BEGIN

	UPDATE [Users] 
	SET  Username = @UserName, Usertype = @UserType
	WHERE UserGUID = @UserGUID

END;
GO
PRINT N'Creating [dbo].[ArchivedQuestions_ReadAllByQuizID]...';


GO
CREATE PROCEDURE [dbo].[ArchivedQuestions_ReadAllByQuizID]
	@QuizGUID uniqueIdentifier
AS
BEGIN
	SET NOCOUNT ON;
	SELECT aq.ArchivedQuestionGUID, aq.ArchivedQuestionText, aq.QuestionType, aq.LevelGUID,
		   aq.CategoryGUID, aq.QuizGUID
	FROM ArchivedQuestions aq
	JOIN Quizes q ON q.QuizGUID = aq.QuizGUID
	WHERE q.QuizGUID = @QuizGUID
	ORDER BY aq.ArchivedQuestionGUID
END
GO
PRINT N'Creating [dbo].[Users_SetStatus]...';


GO
CREATE PROCEDURE [dbo].[Users_SetStatus]
	@UserGUID UNIQUEIDENTIFIER,
	@IsActive BIT
AS
BEGIN
    UPDATE [Users]
	SET IsActive = @IsActive
	WHERE (UserGUID = @UserGUID)
END;
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6b4b8f5c-2794-4a52-908e-6e59f5332025')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6b4b8f5c-2794-4a52-908e-6e59f5332025')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '95afd283-6edf-49b5-b87a-e4b87eba9ee6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('95afd283-6edf-49b5-b87a-e4b87eba9ee6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '63dc374c-b9e7-447a-b288-1d216294d2c9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('63dc374c-b9e7-447a-b288-1d216294d2c9')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Permissions] WITH CHECK CHECK CONSTRAINT [FK_Permissions_ToTable];


GO
PRINT N'Update complete.';


GO
