/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[LinkPermission].[CSSClass] on table [dbo].[LinkPermission] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[LinkPermission])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering [dbo].[LinkPermission]...';


GO
ALTER TABLE [dbo].[LinkPermission]
    ADD [CSSClass] NVARCHAR (50) NOT NULL;


GO
PRINT N'Altering [dbo].[LinkPermission_ReadLinkPermissionsByUserGuid]...';


GO
ALTER PROCEDURE [dbo].[LinkPermission_ReadLinkPermissionsByUserGuid]
	@userGUID UNIQUEIDENTIFIER
AS
BEGIN
	SELECT Link, lp.PermissionGUID, CSSClass
	FROM [dbo].[LinkPermission] lp
	INNER JOIN [dbo].[Permissions] p
	ON p.PermissionGUID=lp.PermissionGUID
	WHERE p.UserGUID=@userGUID;
END
GO
PRINT N'Altering [dbo].[Users_UpdatePermissions]...';


GO
ALTER PROCEDURE [dbo].[Users_UpdatePermissions]
	@UserGUID UNIQUEIDENTIFIER,
    @PermissionsListGUID NVARCHAR(MAX)
AS
BEGIN

	DELETE 
	FROM [Permissions]
	WHERE UserGUID = @UserGUID

	IF (LEN(@PermissionsListGUID) > 0)
	BEGIN
		INSERT INTO [Permissions] 
			([UserGUID],[PermissionGUID])
		SELECT @UserGUID, ItemID 
		FROM dbo.SplitStringList(@PermissionsListGUID);
	END;
END;
GO
PRINT N'Creating [dbo].[Question_CountAllFilteredQuestions]...';


GO
CREATE PROCEDURE [dbo].[Question_CountAllFilteredQuestions] 
		@Category AS uniqueidentifier = null ,
	@Level AS uniqueidentifier = null,
	@Tag AS NVARCHAR(MAX)  = null,
	@Type AS NVARCHAR(MAX) = null
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);
	
	Set @SqlText = '
		Select COUNT(DISTINCT q.QuestionGUID)
	 FROM [dbo].Questions q
	 INNER JOIN QuestionTags qt ON q.QuestionGUID = qt.QuestionGUID
	INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
	INNER JOIN Categories c ON q.CategoryGUID = c.CategoryGUID
	INNER JOIN Levels l ON q.LevelGUID = l.LevelGUID';
	

	IF (@Tag IS NOT NULL)
	BEGIN
		SET @SqlText = @SqlText + ' INNER JOIN (SELECT ItemID FROM [dbo].[SplitGuidStringList](@FoundTag)) ft ON ft.ItemID = qt.TagGUID';
	END

	IF (@Type IS NOT NULL)
	BEGIN
		SET @SqlText = @SqlText + ' INNER JOIN (SELECT ItemID FROM [dbo].[SplitStringList] (@FoundType)) qtft on q.QuestionType=qtft.ItemID';
	END

	IF ((@Category IS NOT NULL) OR (@Level IS NOT NULL))
	BEGIN
		SET @SqlText = @SqlText + ' WHERE';

			IF (@Category IS NOT  NULL) 
			BEGIN
				SET @SqlText = @SqlText + ' c.CategoryGUID = @FoundCategory';
			END
			IF ((@Category IS NOT NULL) AND (@Level IS NOT NULL))
			BEGIN 
			SET @SqlText = @SqlText + ' AND';
			END
			IF (@Level IS NOT NULL) 
			BEGIN
				SET @SqlText = @SqlText + ' l.LevelGUID=@FoundLevel';
			END
		END

	

	

	SET @ParmDefinition = N'@FoundTag NVARCHAR(MAX), @FoundType NVARCHAR(MAX),@FoundCategory uniqueidentifier,@FoundLevel uniqueidentifier';

	EXECUTE sp_executesql @SqlText, @ParmDefinition,
                      @FoundTag = @Tag,
					  @FoundType = @Type,
					  @FoundCategory = @Category,
					  @FoundLevel = @Level
					  
END
GO
PRINT N'Update complete.';


GO
