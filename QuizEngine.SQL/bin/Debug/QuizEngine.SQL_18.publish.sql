/*
Deployment script for QuizEngine

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizEngine"
:setvar DefaultFilePrefix "QuizEngine"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[SplitDecimalStringList]...';


GO
CREATE FUNCTION [dbo].[SplitDecimalStringList]
(
	@DecimalList NVARCHAR(MAX)
)
RETURNS 
@ParsedList TABLE
(
	ItemID Decimal(5,2)
)
AS
BEGIN
	DECLARE @strLen int
	DECLARE @strPos int
	DECLARE @nextStrDelim int
	DECLARE @val Decimal(5,2)

	SET @strLen = len(@DecimalList)
	IF (@strLen <= 1) RETURN
	SET @strPos = 0

	WHILE @strPos <= @strLen
	BEGIN
		SET @nextStrDelim = charindex(',', @DecimalList, @strPos)
		IF @nextStrDelim = 0
			SET @nextStrDelim = @strLen + 1

		SET @val = convert(decimal(5,2),substring(@DecimalList, @strPos, @nextStrDelim - @strPos))

		INSERT @ParsedList VALUES (@val)

		SET @strPos = @nextStrDelim + 1
	END 

RETURN
END
GO
PRINT N'Creating [dbo].[SplitString]...';


GO
CREATE FUNCTION [dbo].[SplitString]
(
@List NVARCHAR(MAX),
@SplitOn NVARCHAR(5)
)
RETURNS @RtnValue TABLE (Value NVARCHAR(MAX))

AS
BEGIN

-- Charindex = Searches an expression for another expression and returns its starting position if found.
	WHILE(CHARINDEX(@SplitOn,@List)>0)
		BEGIN
			INSERT INTO @RtnValue (Value)
			SELECT Value = LTRIM(RTRIM(SUBSTRING(@List,1,CHARINDEX(@SplitOn,@List)-1))) 

			SET @List = SUBSTRING(@List,CHARINDEX(@SplitOn,@List)+LEN(@SplitOn),LEN(@List))
		END

	INSERT INTO @RtnValue (Value)
	SELECT Value = LTRIM(RTRIM(@List))

	RETURN
END
GO
PRINT N'Altering [dbo].[FreeTextQuizView_ReadAll]...';


GO
ALTER PROCEDURE [dbo].[FreeTextQuizView_ReadAll]

	@SortExpression nvarchar(max),
	@FoundrowPerPage INT = NULL,
	@FoundPageNumber INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	Declare @SqlText AS NVARCHAR(MAX);
	DECLARE @ParmDefinition NVARCHAR(MAX);

	SET @ParmDefinition = N'@FoundPageNumber INT,@FoundrowPerPage INT';
	
	Set @SqlText = ' SELECT Users.UserGUID, Quizes.QuizGUID, Username, QuizDate, CategoryName, LevelName
	FROM Users, QuizUserLinks, Levels, Categories, Quizes
	WHERE QuizUserLinks.UserGUID = Users.UserGUID
	AND Quizes.QuizGUID=QuizUserLinks.QuizGUID
	AND Quizes.LevelGUID=Levels.LevelGUID
	AND Quizes.CategoryGUID=Categories.CategoryGUID
	AND Result IS NULL
	AND OnlineOrDownloaded = 1
	AND IsTaken=1';
	

	IF (@SortExpression IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' Order by ' + @SortExpression;
	IF (@FoundPageNumber IS NOT NULL and @FoundrowPerPage IS NOT NULL)
	BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundrowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
	END
	END

	EXECUTE sp_executesql @SqlText, @ParmDefinition,
							@FoundrowPerPage = @FoundrowPerPage,
							@FoundPageNumber = @FoundPageNumber;
                    
END
GO
PRINT N'Altering [dbo].[Users_Update]...';


GO

---------------------------------------  UPDATE A USER

ALTER PROCEDURE [dbo].[Users_Update]
	@UserGUID UNIQUEIDENTIFIER,
	@UserName NVARCHAR(MAX),
	@UserType SMALLINT,
	@IsActive BIT
AS
BEGIN
	UPDATE [Users] 
	SET  Username = @UserName, Usertype = @UserType, IsActive = @IsActive
	WHERE UserGUID = @UserGUID
END;
GO
PRINT N'Creating [dbo].[Answers_ReadByArchivedChoiceID]...';


GO

create PROCEDURE [dbo].[Answers_ReadByArchivedChoiceID]
@ArchivedChoiceGUID	uniqueidentifier
AS
BEGIN
	select QuizGUID,ArchivedQuestionGUID,Grade,AnswerText,UserGUID,ArchivedChoiceGUID from dbo.[Answers]	
	where ArchivedChoiceGUID=@ArchivedChoiceGUID
END
GO
PRINT N'Creating [dbo].[Answers_ReadByArchivedQuestionID]...';


GO

Create PROCEDURE [dbo].[Answers_ReadByArchivedQuestionID]
@ArchivedQuestionID	uniqueidentifier
AS
BEGIN
	select QuizGUID,Grade,AnswerText,UserGUID,ArchivedChoiceGUID from dbo.[Answers]
END
GO
PRINT N'Creating [dbo].[Answers_ReadByQuizID]...';


GO

create PROCEDURE [dbo].[Answers_ReadByQuizID] 
@QuizGUID	uniqueidentifier
AS
BEGIN
	select ArchivedQuestionGUID,Grade,AnswerText,UserGUID,ArchivedChoiceGUID from [Answers]
	where QuizGUID=@QuizGUID
END
GO
PRINT N'Creating [dbo].[Answers_UpdateGrade]...';


GO
CREATE PROCEDURE [dbo].[Answers_UpdateGrade]
@QuizGUID uniqueidentifier,
@ArchivedQuestionGUID uniqueidentifier,
@Grade decimal(5, 2),
@UserGUID uniqueidentifier,
@ArchivedChoiceGUID uniqueidentifier
AS
BEGIN
UPDATE dbo.[Answers] SET Grade=@Grade
WHERE  QuizGUID=@QuizGUID and ArchivedQuestionGUID=@ArchivedQuestionGUID  and UserGUID=@UserGUID and ArchivedChoiceGUID=@ArchivedChoiceGUID
END
GO
PRINT N'Creating [dbo].[FreeTextQuizView_CountAllFilteredQuizzes]...';


GO
CREATE PROCEDURE [dbo].[FreeTextQuizView_CountAllFilteredQuizzes] 
AS
BEGIN
	SET NOCOUNT ON;
	Select COUNT(*)
	FROM Users, QuizUserLinks, Levels, Categories, Quizes
	WHERE QuizUserLinks.UserGUID = Users.UserGUID
	AND Quizes.QuizGUID=QuizUserLinks.QuizGUID
	AND Quizes.LevelGUID=Levels.LevelGUID
	AND Quizes.CategoryGUID=Categories.CategoryGUID
	AND Result IS NULL
	AND OnlineOrDownloaded = 1
	AND IsTaken = 1
END
GO
PRINT N'Creating [dbo].[QuestionTagViews_ReadAll]...';


GO
CREATE PROCEDURE [dbo].[QuestionTagViews_ReadAll]
	 @tagName nvarchar(50)

AS
BEGIN

	SELECT q.Text, t.TagName
FROM Questions q
	INNER JOIN QuestionTags qt ON q.QuestionGUID = qt.QuestionGUID
	INNER JOIN Tags t ON t.TagGUID = qt.TagGUID
WHERE t.TagName = @tagName

END;
GO
PRINT N'Creating [dbo].[QuizUserLinks_UpdateFinalResult]...';


GO
CREATE PROCEDURE [dbo].[QuizUserLinks_UpdateFinalResult]
	@QuizGUID uniqueidentifier,
	@UserGUID uniqueidentifier,
	@Result decimal(5,2)
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE dbo.QuizUserLinks
	SET Result = @Result
	WHERE QuizGUID = @QuizGUID and UserGUID=@UserGUID
END
GO
PRINT N'Creating [dbo].[QuizView_Count]...';


GO
CREATE PROCEDURE  [dbo].[QuizView_Count]
	@UserGUID as uniqueidentifier = NULL
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @SqlText nvarchar(MAX);
	DECLARE @Parameters nvarchar(max);
	SET @Parameters = N'@FoundUserGuid uniqueidentifier';
	SET @SqlText = 'SELECT COUNT(*)
	FROM Quizes JOIN dbo.QuizUserLinks ON Quizes.QuizGUID = dbo.QuizUserLinks.QuizGUID
		 JOIN dbo.Users ON Users.UserGUID = dbo.QuizUserLinks.UserGUID , dbo.Levels , dbo.Categories
	WHERE Quizes.LevelGUID = Levels.LevelGUID AND Quizes.CategoryGUID = Categories.CategoryGUID';
	IF (@UserGUID is not NULL)
		BEGIN
			SET @SqlText = @SqlText + ' AND dbo.QuizUserLinks.UserGUID= @FoundUserGUID ';	
		END
     EXECUTE sp_executesql @SqlText, @Parameters,
			@FoundUserGUID   = @UserGUID;	
END
GO
PRINT N'Creating [dbo].[QuizView_Read]...';


GO
CREATE PROCEDURE [dbo].[QuizView_Read]
	@PageNumber as int = NULL,
	@RowPerPage as int =NULL,
	@SortExpression as NVARCHAR(MAX) = 'dbo.Quizes.QuizGUID',
	@UserGUID as uniqueidentifier = NULL
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @SqlText as NVARCHAR(MAX);
	DECLARE @Parameters as NVARCHAR(MAX);
	SET @Parameters =N'@FoundPageNumber  INT,@FoundRowPerPage INT, @FoundUserGuid uniqueidentifier';	--SET THE FORMAL PARAMETERS
	SET @SqlText = 'SELECT dbo.Users.Username , dbo.Quizes.QuizGUID , dbo.QuizUserLinks.Result , dbo.Categories.CategoryName , dbo.Levels.LevelName, 
	dbo.QuizUserLinks.UserGUID , QuizDate , OnlineOrDownloaded , IsTaken, dbo.Levels.Difficulty
	FROM Quizes JOIN dbo.QuizUserLinks ON Quizes.QuizGUID = dbo.QuizUserLinks.QuizGUID
		 JOIN dbo.Users ON Users.UserGUID = dbo.QuizUserLinks.UserGUID , dbo.Levels , dbo.Categories
	WHERE Quizes.LevelGUID = Levels.LevelGUID AND Quizes.CategoryGUID = Categories.CategoryGUID';
	IF (@UserGUID is not NULL)
		BEGIN
			SET @SqlText = @SqlText + ' AND dbo.QuizUserLinks.UserGUID= @FoundUserGUID ';
			
		END

    SET @SqlText = @SqlText + ' ORDER BY ' + @SortExpression;
	  
	IF (@PageNumber is not null AND @RowPerPage IS NOT NULL)--OR (@PageNumber != -1 AND @RowPerPage != -1))
		BEGIN
			SET @SqlText = @SqlText + ' OFFSET  ((@FoundPageNumber-1)* @FoundRowPerPage)  ROWS FETCH NEXT @FoundrowPerPage ROWS ONLY';
		END
   EXECUTE sp_executesql @SqlText, @Parameters,
			@FoundPageNumber = @PageNumber,
			@FoundRowPerPage = @RowPerPage,
			@FoundUserGUID   = @UserGUID;			
END
GO
PRINT N'Update complete.';


GO
